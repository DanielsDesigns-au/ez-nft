/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace EzNFTMarket {
  export type MarketNFTStruct = {
    nftId: BigNumberish;
    nftContract: string;
    tokenId: BigNumberish;
    seller: string;
    owner: string;
    price: BigNumberish;
    sold: boolean;
  };

  export type MarketNFTStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    nftId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
  };
}

export interface EzNFTMarketInterface extends utils.Interface {
  contractName: "EzNFTMarket";
  functions: {
    "createMarketNFT(address,uint256,uint256)": FunctionFragment;
    "getListingPrice()": FunctionFragment;
    "getMarketNFTs()": FunctionFragment;
    "getUserMintedNFTs()": FunctionFragment;
    "getUserNFTs()": FunctionFragment;
    "sellMarketNFT(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMarketNFT",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMintedNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellMarketNFT",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarketNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMintedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellMarketNFT",
    data: BytesLike
  ): Result;

  events: {
    "MarketNFTCreated(uint256,address,uint256,address,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketNFTCreated"): EventFragment;
}

export type MarketNFTCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
  {
    nftId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
  }
>;

export type MarketNFTCreatedEventFilter =
  TypedEventFilter<MarketNFTCreatedEvent>;

export interface EzNFTMarket extends BaseContract {
  contractName: "EzNFTMarket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EzNFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMarketNFT(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getListingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketNFTs(
      overrides?: CallOverrides
    ): Promise<[EzNFTMarket.MarketNFTStructOutput[]]>;

    getUserMintedNFTs(
      overrides?: CallOverrides
    ): Promise<[EzNFTMarket.MarketNFTStructOutput[]]>;

    getUserNFTs(
      overrides?: CallOverrides
    ): Promise<[EzNFTMarket.MarketNFTStructOutput[]]>;

    sellMarketNFT(
      nftContract: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createMarketNFT(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketNFTs(
    overrides?: CallOverrides
  ): Promise<EzNFTMarket.MarketNFTStructOutput[]>;

  getUserMintedNFTs(
    overrides?: CallOverrides
  ): Promise<EzNFTMarket.MarketNFTStructOutput[]>;

  getUserNFTs(
    overrides?: CallOverrides
  ): Promise<EzNFTMarket.MarketNFTStructOutput[]>;

  sellMarketNFT(
    nftContract: string,
    nftId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createMarketNFT(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketNFTs(
      overrides?: CallOverrides
    ): Promise<EzNFTMarket.MarketNFTStructOutput[]>;

    getUserMintedNFTs(
      overrides?: CallOverrides
    ): Promise<EzNFTMarket.MarketNFTStructOutput[]>;

    getUserNFTs(
      overrides?: CallOverrides
    ): Promise<EzNFTMarket.MarketNFTStructOutput[]>;

    sellMarketNFT(
      nftContract: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MarketNFTCreated(uint256,address,uint256,address,address,uint256,bool)"(
      nftId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): MarketNFTCreatedEventFilter;
    MarketNFTCreated(
      nftId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): MarketNFTCreatedEventFilter;
  };

  estimateGas: {
    createMarketNFT(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    getUserMintedNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    getUserNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    sellMarketNFT(
      nftContract: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarketNFT(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getListingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserMintedNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellMarketNFT(
      nftContract: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
